# -*- coding: utf-8 -*-
"""Traffic accident prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N5bIqyh1iIv1vPDQwZadsLUrpMGNhjSy
"""

!pip install dash dash-bootstrap-components

!pip install dash dash-bootstrap-components plotly pandas scikit-learn

import dash
import dash_bootstrap_components as dbc
from dash import dcc, html, Input, Output, State
import pandas as pd
import plotly.graph_objects as go
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier

# Sample Data
data = {
    'hour': [8, 17, 22, 13, 18],
    'weather': ['Clear', 'Rainy', 'Clear', 'Snowy', 'Clear'],
    'road_type': ['Urban', 'Highway', 'Urban', 'Highway', 'Urban'],
    'severity': [0, 1, 0, 1, 0]
}
df = pd.DataFrame(data)

# Preprocessing
X = pd.get_dummies(df[['hour', 'weather', 'road_type']], drop_first=True)
y = df['severity']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model Training
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Dashboard Initialization
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.LUX])
app.title = "Traffic Accident Risk Prediction"

# Dashboard Layout
app.layout = dbc.Container([
    html.H1("Traffic Accident Risk Prediction", className="text-center mt-4 mb-4 text-primary"),

    dbc.Row([
        dbc.Col([
            dbc.Card([
                dbc.CardHeader("Input Parameters", className="bg-primary text-white"),
                dbc.CardBody([
                    html.Label("Select Hour:", className="fw-bold"),
                    dcc.Slider(0, 23, 1, value=12, id='hour-slider',
                               marks={i: str(i) for i in range(0, 24)}, className="mb-4"),

                    html.Label("Select Weather:", className="fw-bold"),
                    dcc.Dropdown(
                        options=[
                            {'label': 'Clear', 'value': 'Clear'},
                            {'label': 'Rainy', 'value': 'Rainy'},
                            {'label': 'Snowy', 'value': 'Snowy'}
                        ],
                        value='Clear', id='weather-dropdown', className="mb-4"
                    ),

                    html.Label("Select Road Type:", className="fw-bold"),
                    dcc.Dropdown(
                        options=[
                            {'label': 'Urban', 'value': 'Urban'},
                            {'label': 'Highway', 'value': 'Highway'}
                        ],
                        value='Urban', id='road-dropdown', className="mb-4"
                    ),

                    dbc.Button("Predict", id='predict-btn', color="primary", className="mt-2 w-100 fw-bold"),
                ])
            ], className="shadow-lg p-3 mb-4"),
        ], md=4),

        dbc.Col([
            dbc.Card([
                dbc.CardHeader("Prediction Result", className="bg-success text-white text-center"),
                dbc.CardBody([
                    html.H4(id="prediction-text", className="text-center text-dark fw-bold"),
                    dcc.Graph(id="risk-graph")
                ])
            ], className="shadow-lg p-3")
        ], md=8),
    ])
], fluid=True)

# Callback for Prediction and Graph Update
@app.callback(
    [Output('prediction-text', 'children'),
     Output('risk-graph', 'figure')],
    [Input('predict-btn', 'n_clicks')],
    [State('hour-slider', 'value'),
     State('weather-dropdown', 'value'),
     State('road-dropdown', 'value')],
    prevent_initial_call=True
)
def predict_and_update_graph(n_clicks, hour, weather, road_type):
    # Prepare input data
    input_data = pd.DataFrame({'hour': [hour], 'weather': [weather], 'road_type': [road_type]})
    input_data = pd.get_dummies(input_data, drop_first=True)
    input_data = input_data.reindex(columns=X.columns, fill_value=0)

    # Make prediction
    prediction = model.predict(input_data)[0]
    risk_level = "ðŸš¨ High Risk" if prediction == 1 else "âœ… Low Risk"

    # Create bar graph
    fig = go.Figure()
    fig.add_trace(go.Bar(
        x=["Predicted Risk"],
        y=[1 if prediction == 1 else 0],
        marker_color='red' if prediction == 1 else 'green',
        text=risk_level,
        textposition='outside'
    ))
    fig.update_layout(
        title="Predicted Accident Risk Level",
        yaxis=dict(title="Severity", range=[0, 1.2], showticklabels=False),
        xaxis=dict(title="Risk Level"),
        showlegend=False
    )

    return f"Predicted Accident Risk: {risk_level}", fig

# Run the Dashboard
if __name__ == "__main__":
    app.run(debug=True)

pip install dash dash-bootstrap-components

!pip install dash dash-bootstrap-components pandas scikit-learn plotly

!pip install dash dash-bootstrap-components pandas plotly

!pip install dash dash-bootstrap-components plotly pandas

import dash
import dash_bootstrap_components as dbc
from dash import dcc, html, Input, Output
import pandas as pd
import plotly.express as px

# Sample Data: Traffic Accidents with Locations
data = {
    'Latitude': [12.9716, 12.9352, 12.9081, 13.0827, 12.9141],
    'Longitude': [77.5946, 77.6245, 77.6483, 80.2707, 77.6109],
    'Severity': ['High', 'Low', 'Medium', 'High', 'Low']
}
df = pd.DataFrame(data)

# Dash App Setup
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.LUX])

app.layout = dbc.Container([
    html.H1("Traffic Accidents Map", className="text-center mt-4 mb-4"),
    dcc.Graph(id="map-graph"),
    html.Div([
        html.Label("Filter by Severity:", className="mb-2"),
        dcc.Dropdown(
            options=[{'label': sev, 'value': sev} for sev in df['Severity'].unique()],
            value=None,
            id="severity-filter",
            placeholder="Select severity",
            className="mb-3"
        )
    ])
], fluid=True)

@app.callback(
    Output('map-graph', 'figure'),
    Input('severity-filter', 'value')
)
def update_map(severity):
    filtered_df = df if not severity else df[df['Severity'] == severity]

    # Debugging: Print filtered data
    print(filtered_df)

    fig = px.scatter_mapbox(
        filtered_df,
        lat='Latitude',
        lon='Longitude',
        color='Severity',
        title="Traffic Accidents Locations",
        mapbox_style="open-street-map",
        zoom=6,  # Adjust zoom for visibility
        height=500
    )

    fig.update_traces(marker=dict(size=12))  # Increase marker size for visibility
    fig.update_layout(margin={"r":0, "t":50, "l":0, "b":0})
    return fig

if __name__ == "__main__":
    print("Running Dash app on http://127.0.0.1:8060/")
    app.run(debug=True, port=8060)

import dash
import dash_bootstrap_components as dbc
from dash import dcc, html, Input, Output
import pandas as pd
import plotly.express as px
import numpy as np

# Simulating weekly accident data
np.random.seed(42)
date_range = pd.date_range(start="2024-01-01", periods=100, freq='D')
accidents = np.random.choice(['Low', 'Medium', 'High'], size=100)
df = pd.DataFrame({
    'date': date_range,
    'severity': accidents
})

# Extract day of the week (0=Monday, 6=Sunday)
df['day_of_week'] = df['date'].dt.day_name()

# Aggregate data by week
df['week'] = df['date'].dt.isocalendar().week
weekly_report = df.groupby(['week', 'day_of_week'])['severity'].count().reset_index()
weekly_report = weekly_report.rename(columns={'severity': 'accident_count'})

# Dash App Setup
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.LUX])
app.title = "Weekly Traffic Accident Report"

# Layout of the dashboard
app.layout = dbc.Container([
    html.H1("Weekly Traffic Accident Report", className="text-center mt-4 mb-4"),
    dbc.Row([
        dbc.Col([  # Left column with report summary
            dbc.Card([
                dbc.CardHeader("Weekly Accident Summary"),
                dbc.CardBody([
                    html.H5("Accidents per Week", className="card-title"),
                    dcc.Graph(
                        id="weekly-report-graph",
                        figure=px.bar(
                            weekly_report,
                            x="week",
                            y="accident_count",
                            color="day_of_week",
                            title="Weekly Traffic Accident Count",
                            labels={"accident_count": "Number of Accidents", "week": "Week Number"}
                        ).update_layout(barmode='stack')
                    ),
                ])
            ])
        ], md=12),
    ])
], fluid=True)

if __name__ == "__main__":
    app.run(debug=True)

